package com.example.demo.service.impl;

import com.example.demo.model.dto.MyUserDetail;
import com.example.demo.model.dto.RoleDTO;
import com.example.demo.model.dto.UserDTO;
import com.example.demo.service.UserService;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

// D√πng ƒë·ªÉ load th√¥ng tin ng∆∞·ªùi d√πng t·ª´ database ƒë·ªÉ Spring Security d√πng ƒë·ªÉ ƒëƒÉng nh·∫≠p (xu ly trong class SecurityConfig)
// Khi ng∆∞·ªùi d√πng nh·∫≠p username (tr√™n form login ho·∫∑c d√πng Basic Auth), Spring s·∫Ω g·ªçi loadUserByUsername
// UserDetailsService l√† interface c·ªët l√µi trong Spring Security d√πng ƒë·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng (user) t·ª´ h·ªá th·ªëng, ph·ª•c v·ª• cho qu√° tr√¨nh ƒëƒÉng nh·∫≠p (authentication).
//üëâ Class n√†y gi√∫p Spring bi·∫øt ng∆∞·ªùi d√πng l√† ai, password l√† g√¨, c√≥ quy·ªÅn g√¨.
@Service
public class CustomUserDetailServiceImpl implements UserDetailsService {

    @Autowired
    private UserService userService;

    //       Ng∆∞·ªùi d√πng g·ª≠i username + password
    //                      ‚Üì
    //       Spring g·ªçi ‚Üí CustomUserDetailServiceImpl.loadUserByUsername()
    //                      ‚Üì
    //       L·∫•y t·ª´ DB ‚Üí UserDTO ‚Üí convert ‚Üí MyUserDetail (UserDetails)
    //                      ‚Üì
    //       Spring so s√°nh password + ki·ªÉm tra quy·ªÅn
    //                      ‚Üì
    //       N·∫øu h·ª£p l·ªá ‚Üí Cho truy c·∫≠p / t·ª´ ch·ªëi

    @Override
    public UserDetails loadUserByUsername(String name) throws UsernameNotFoundException {
        //Ho·∫°t ƒë·ªông:
        UserDTO userDTO = userService.getUserByUserNameAndStatus(name, 1);
        if (userDTO == null) {
            throw new UsernameNotFoundException("Username not found");
        }

        // G√°n role th√†nh quy·ªÅn (authority) duy nh·∫•t
        List<GrantedAuthority> authorities = new ArrayList<>();
        if (userDTO.getRoleCode() != null) {
            authorities.add(new SimpleGrantedAuthority("ROLE_" + userDTO.getRoleCode()));
        }

        //Chuy·ªÉn UserDTO ‚Üí MyUserDetail
        MyUserDetail myUserDetail = new MyUserDetail(
                name,
                userDTO.getPassword(),
                true,
                true,
                true,
                true,
                authorities
        );

        BeanUtils.copyProperties(userDTO, myUserDetail);
        return myUserDetail;
    }
}
